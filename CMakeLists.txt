cmake_minimum_required(VERSION 3.2)

#set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(WIN32)
  add_definitions(-DREDI_WINDOWS)
elseif(UNIX)
  add_definitions(-DREDI_LINUX)
else()
  message(FATAL_ERROR "Unknown operating system")
endif()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  set(REDI_GCC 1)
  set(REDI_COMPILER_NAME "gcc")
  add_definitions(-DREDI_GCC)
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  set(REDI_CLANG 1)
  set(REDI_COMPILER_NAME "clang")
  add_definitions(-DREDI_CLANG)
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  set(REDI_MSVC 1)
  set(REDI_COMPILER_NAME "MSVC")
  add_definitions(-DREDI_MSVC)
else()
  message(FATAL_ERROR "Unknown compiler")
endif()

if(REDI_GCC OR REDI_CLANG)
  set(warnings "-Wall -Wextra -Wpedantic -Wreorder -Wno-unused-local-typedefs -Wno-deprecated-declarations -Wno-overflow -std=c++1z")
  if (REDI_CLANG)
    set(compiler_options "-fno-limit-debug-info -Wno-c++1z-extensions")
  endif()
elseif(REDI_MSVC)
  set(warnings "/W3")
  set(compiler_options "${compiler_options} /std:c++latest /EHsc -D_WIN32_WINNT=0x0501 -D_SCL_SECURE_NO_WARNINGS -D_HAS_AUTO_PTR_ETC=1")
  # /std:c++latest
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(REDI_BUILD_TYPE "Debug")
else()
  set(REDI_BUILD_TYPE "Release")
endif()

set(compiler_options "${compiler_options} ${warnings}")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${compiler_options}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${compiler_options}")

message(STATUS "Current compiler: ${REDI_COMPILER_NAME}")
message(STATUS "C flags: ${CMAKE_C_FLAGS}")
message(STATUS "CXX flags: ${CMAKE_CXX_FLAGS}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE} -> ${REDI_BUILD_TYPE}")

get_filename_component(BOOST_INCLUDEDIR "${BOOST_INCLUDEDIR}" REALPATH)
get_filename_component(BOOST_LIBRARYDIR "${BOOST_LIBRARYDIR}" REALPATH)
get_filename_component(JSON_REPO_DIR "${JSON_REPO_DIR}" REALPATH)

add_subdirectory(src)